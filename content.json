{"pages":[{"title":"Kitchen Table Code","text":"이 블로그는식탁(Kitchen Table)에서 쉽게 하는코딩에 관한 내용입니다. 사용된 프로그래밍 언어 Javascript Typescript Vue React","link":"/about/index.html"}],"posts":[{"title":"Javascript 로 만든 슬라이더(Slider)-1","text":"슬라이더(slider)는 캐로셀(Carousel)이라고도 불리는 요소로 여러 장의 이미지파일들을 나열해 회전하는 것처럼 보여준다. 먼저, Html 로 만든 구조를 만든다. &lt;정을수 강사님 강의를 참조함&gt; 123456789101112131415161718192021&lt;body&gt; &lt;div class=&quot;slider_wrap&quot;&gt; &lt;div class=&quot;slider_box&quot;&gt; &lt;ul class=&quot;slider&quot;&gt; &lt;li&gt; &lt;img src=&quot;https://via.placeholder.com/800x200.png?text=1&quot; alt=&quot;&quot; /&gt; &lt;/li&gt; &lt;li&gt; &lt;img src=&quot;https://via.placeholder.com/800x200.png?text=2&quot; alt=&quot;&quot; /&gt; &lt;/li&gt; &lt;li&gt; &lt;img src=&quot;https://via.placeholder.com/800x200.png?text=3&quot; alt=&quot;&quot; /&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div class=&quot;arrow&quot;&gt; &lt;a href=&quot;&quot; class=&quot;prev&quot;&gt;이전&lt;/a&gt; &lt;a href=&quot;&quot; class=&quot;next&quot;&gt;다음&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; css로 슬라이더의 모양을 만든다. 123456789101112131415161718192021222324252627282930313233343536373839404142* { margin: 0; padding: 0;}a { text-decoration: none;}li { list-style: none;}.slider_wrap { width: 100%; max-width: 800px; margin: 0 auto; position: relative;}.slider_wrap &gt; .slider_box { overflow: hidden; position: relative; height: 200px;}.slider_wrap &gt; .slider_box .slider { position: absolute; top: 0; left: 0;}.slider_wrap &gt; .slider_box .slider &gt; li { float: left;}.slider_wrap &gt; .slider_box .slider &gt; li img { vertical-align: top;}.slider_wrap .arrow &gt; a.prev { position: absolute; left: -50px; top: 100px;}.slider_wrap .arrow &gt; a.next { position: absolute; right: -50px; top: 100px;}","link":"/2021/12/13/javascript-Slider1/"},{"title":"Javascript 로 만든 슬라이더(Slider)-2","text":"Html 로 만든 구조위에 css 로 슬라이더의 기본 모양을 만등 후 javascript 에서 다룰 수 있도록 DOM 을 생성하고, 필요한 변수들을 선언한다. 내부에 2개의 a tag(“이전, “다음”)가 있는 버튼을 한개만 만들어이벤트를 붙이면 버블링효과로 인해 코드가 훨씬 간결해 진다.또, 사진을 옯기는 방식도 slider {transform : translateX(800px)} 과 같은 방식보다 position 층으로 띄운 slider 의 left 값을 옮길 가로넓이 만큼 계산해서 주면 간결해진다. &lt;정을수 강사님 강의를 참조함&gt; 1234567891011121314151617181920212223242526272829303132333435// DOM 생성const sliderWrap = document.querySelector(&quot;.slider_wrap&quot;);const sliderBox = sliderWrap.querySelector(&quot;.slider_box&quot;);const slider = sliderBox.querySelector(&quot;.slider&quot;);const sliders = slider.querySelectorAll(&quot;li&quot;);const moveButton = sliderWrap.querySelector(&quot;.arrow&quot;);// 슬라이더 총길이 계산const liwidth = sliders[0].clientWidth;const liLength = sliders.length;const sliderLen = liwidth * liLength;slider.style.width = liwidth * liLength + &quot;px&quot;;let moveDist = 0;// 화면이 자연스럽게 넘어가도록 transition 값을 준다.let speedTime = 500;moveButton.addEventListener(&quot;click&quot;, moveSlide);function moveSlide(e) { e.preventDefault(); if (e.target.className === &quot;next&quot;) { // next 버튼을 누르면 현재 보고 있는 이미지는 왼쪽으로 이동하므로 // 즉, css로 position 층으로 띄운 slider 의 left 값을 음수를 줘서 // 현재 보고 있는 이미지를 왼쪽으로 이동시킨다. moveDist -= liwidth; slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } else { // prev 버튼은 next의 반대로 moveDist += liwidth; slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; }} 그러나, 맨앞과 맨뒤 이미지에서 멈추게 되면, 슬라이더라고 할 수 없으니 다음화에서 고쳐보겠다.","link":"/2021/12/13/Javascrpt-Slider2/"},{"title":"Javascript 로 만든 슬라이더(Slider)-3","text":"지난 회에 3장의 이미지가 앞,뒤로 움직이게 만들었지만,첫번째 이미지 “이전”과 마지막 이미지 “이후”는 작동하지 않았다.원래 슬라이더는 맨 앞 이미지와 맨 뒤 이미지가 연결된 것 처럼 움직이므로 연결시켜 보겠다.방식은 첫번째 이미지 앞에 마지막 이미지를 붙이고,마지막 이미지 뒤에 맨앞 이미지를 붙여서 해결해 보겠다.&lt;정을수 강사님 강의를 참조함&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556const sliderWrap = document.querySelector(&quot;.slider_wrap&quot;);const sliderBox = sliderWrap.querySelector(&quot;.slider_box&quot;);const slider = sliderBox.querySelector(&quot;.slider&quot;);const sliders = slider.querySelectorAll(&quot;li&quot;);const moveButton = sliderWrap.querySelector(&quot;.arrow&quot;);const liwidth = sliders[0].clientWidth;const liLength = sliders.length;// cloneNode를 만들어 맨앞과 맨뒤에 붙이기const firstChild = sliders[0].cloneNode(true);const lastChild = sliders[liLength - 1].cloneNode(true);slider.insertBefore(lastChild, sliders[0]);slider.appendChild(firstChild);// 슬라이더 총길이 계산const sliderClone = slider.querySelectorAll(&quot;li&quot;);const cloneLength = sliderClone.length;const sliderLen = liwidth * cloneLength;slider.style.width = sliderLen + &quot;px&quot;;//let moveDist = -liwidth;let speedTime = 500;let currNum = 1;slider.style.left = `${moveDist}px`;moveButton.addEventListener(&quot;click&quot;, moveSlide);function moveSlide(e) { e.preventDefault(); if (e.target.className === &quot;next&quot;) { if (currNum === cloneLength - 1) { moveDist = 0; currNum = 0; slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } else { moveDist += -liwidth; currNum += 1; slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } } else { if (currNum === 0) { currNum = cloneLength - 1; moveDist = -(liwidth * currNum); slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } else { moveDist += liwidth; currNum -= 1; slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } }} 코드내에서 많은 반복구문이 있어서 반복되는 부분을 함수로 만들어보면, 1234567891011121314151617181920212223242526function moveSlide(e) { e.preventDefault(); if (e.target.className === &quot;next&quot;) { move(-1); if (currNum === cloneLength - 1) { moveDist = 0; currNum = 0; slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } } else { move(1); if (currNum === 0) { currNum = cloneLength - 1; moveDist = -(liwidth * currNum); slider.style.left = `${moveDist}px`; slider.style.transition = `all ${speedTime}ms ease`; } } function move(direction) { currentNum += -1 * direction; moveDist += liWidth * direction; slider.style.transition = `all ${speedTime}ms ease`; slider.style.left = `${moveDist}px`; }}","link":"/2021/12/14/javascript-Slider3/"},{"title":"Javascript 로 만든 슬라이더(Slider)-4","text":"각 이미지들이 자연스럽게 넘어가도록 준, transition 효과가 마지막 이미지에서 다음 이미지로 연결될때 자연스럽지 않아서 슬라이더가 맨앞 혹은 마지막에 왔을때 setTimeout 함수를 사용해 잠시 transition을 멈춘 후다시 transition 이 일어나게 한다.&lt;정을수 강사님 강의를 참조함&gt; 123456789101112131415161718192021222324252627282930function moveSlide(e) { e.preventDefault(); if (e.target.className === &quot;next&quot;) { move(-1); if (currNum === cloneLength - 1) { setTimeout(() =&gt; { slider.style.transition = &quot;none&quot;; moveDist = -liwidth; currNum = 1; slider.style.left = `${-liwidth}px`; }, speedTime); } } else { move(1); if (currNum === 0) { setTimeout(() =&gt; { slider.style.transition = &quot;none&quot;; currNum = cloneLength - 2; moveDist = -(liwidth * currNum); slider.style.left = `${moveDist}px`; }, speedTime); } } function move(direction) { currNum += -1 * direction; moveDist += liwidth * direction; slider.style.transition = `all ${speedTime}ms ease`; slider.style.left = `${moveDist}px`; }}","link":"/2021/12/14/javascript-Slider4/"},{"title":"Javascript 로 만든 슬라이더(Slider)-5","text":"슬라이더를 library 화 해보려고 한다.사용자로부터 사용하고자하는 클래스명과 trsnsition 속도를 인자로 받는다.&lt;정을수 강사님 강의를 참조함&gt; body 내부는 사용자가 지정한 클래스명을 가진 ul과 이미지만 있는 구조이다. 123456789101112131415161718&lt;body&gt; &lt;ul class=&quot;slider&quot;&gt; &lt;li&gt; &lt;img src=&quot;https://via.placeholder.com/800x200.png?text=1&quot; alt=&quot;&quot; /&gt; &lt;/li&gt; &lt;li&gt; &lt;img src=&quot;https://via.placeholder.com/800x200.png?text=2&quot; alt=&quot;&quot; /&gt; &lt;/li&gt; &lt;li&gt; &lt;img src=&quot;https://via.placeholder.com/800x200.png?text=3&quot; alt=&quot;&quot; /&gt; &lt;/li&gt; &lt;/ul&gt; &lt;script&gt; window.onload = () =&gt; { mySlider(&quot;.slider&quot;, { speed: 500 }); }; &lt;/script&gt;&lt;/body&gt; 이제, js 로 필요한 DOM을 만들고 부모,자식관계를 만들어 준다. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788const mySlider = function (target, option) { // html에서는 함수를 부르기만 하도록 js에서 onload를 부른다. // innerName 을 즉시실행함수의 return으로 전하면서 closure를 만든다. window.onload = (function (target, option) { return () =&gt; { innerName(target, option); }; })(target, option); function innerName(target, option) { // DOM 생성 const slider = document.querySelector(`${target}`); const sliderBox = document.createElement(&quot;div&quot;); const sliderWrap = document.createElement(&quot;div&quot;); slider.parentNode.insertBefore(sliderWrap, slider); sliderWrap.className = &quot;slider_wrap&quot;; sliderBox.className = &quot;slider_box&quot;; sliderBox.appendChild(slider); sliderWrap.appendChild(sliderBox); const moveButton = document.createElement(&quot;div&quot;); moveButton.className = &quot;arrow&quot;; const prev = document.createElement(&quot;a&quot;); const next = document.createElement(&quot;a&quot;); prev.className = &quot;prev&quot;; prev.textContent = &quot;이전&quot;; prev.href = &quot;&quot;; next.className = &quot;next&quot;; next.textContent = &quot;다음&quot;; next.href = &quot;&quot;; moveButton.appendChild(prev); moveButton.appendChild(next); sliderWrap.appendChild(moveButton); const sliders = slider.querySelectorAll(&quot;li&quot;); const liwidth = sliders[0].clientWidth; const liLength = sliders.length; let moveDist = -liwidth; let speedTime = option.speed; let currNum = 1; // cloneNode를 만들어 맨앞과 맨뒤에 붙이기 const firstChild = sliders[0].cloneNode(true); const lastChild = sliders[liLength - 1].cloneNode(true); slider.insertBefore(lastChild, sliders[0]); slider.appendChild(firstChild); // 슬라이더 총길이 계산 const sliderClone = slider.querySelectorAll(&quot;li&quot;); const cloneLength = sliderClone.length; const sliderLen = liwidth * cloneLength; slider.style.width = sliderLen + &quot;px&quot;; slider.style.left = `${moveDist}px`; moveButton.addEventListener(&quot;click&quot;, moveSlide); function moveSlide(e) { e.preventDefault(); if (e.target.className === &quot;next&quot;) { move(-1); if (currNum === cloneLength - 1) { setTimeout(() =&gt; { slider.style.transition = &quot;none&quot;; moveDist = -liwidth; currNum = 1; slider.style.left = `${-liwidth}px`; }, speedTime); } } else { move(1); if (currNum === 0) { setTimeout(() =&gt; { slider.style.transition = &quot;none&quot;; currNum = cloneLength - 2; moveDist = -(liwidth * currNum); slider.style.left = `${moveDist}px`; }, speedTime); } } function move(direction) { currNum += -1 * direction; moveDist += liwidth * direction; slider.style.transition = `all ${speedTime}ms ease`; slider.style.left = `${moveDist}px`; } } }};","link":"/2021/12/15/javascript-Slider5/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"},{"name":"vaniilaJS","slug":"vaniilaJS","link":"/tags/vaniilaJS/"},{"name":"vanillaJS","slug":"vanillaJS","link":"/tags/vanillaJS/"}],"categories":[]}